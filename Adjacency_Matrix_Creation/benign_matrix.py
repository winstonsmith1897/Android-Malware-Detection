from androguard.misc import AnalyzeAPK
import pandas as pd
import numpy as np
import json
from PIL import Image
import os
from tqdm import tqdm
import signal
import sys
import networkx as nx

class TimeoutException(Exception):   # Custom exception class
    pass

def timeout_handler(signum, frame):   # Custom signal handler
    print('TIME ERROR') 
    raise TimeoutException

# Change the behavior of SIGALRM
signal.signal(signal.SIGALRM, timeout_handler)

with open("/mnt/d/API_complete.json", "r") as fp:
        b = json.load(fp)

path = "/mnt/d/Benign_GRAPH/"

count = 0
for file in tqdm(os.listdir(path)):
	count = count + 1
	if count >= 6:
		print(count)
		signal.alarm(200000)
		try:
			number = 'inf'
			source = 'source'
			target = 'target'
			numbers	 = []
			name = 'imp'
			fil = open(path + file, 'r')
			lines = fil.readlines()
			nodes = []
			edges = []
			df2 = pd.DataFrame(np.zeros((380, 380), dtype=int), index = b,
                        	           columns=b)
			for line in tqdm(lines):
				try:
					if 'id' in line:
						number = line.split('id ', 1)[1].split('\n')[0]
						numbers.append(number)
					if 'label' in line:
						name = line.split(';->', 1)[1].split('(')[0]
						if name in b: 
							nodes.append((number, name))
					if 'source' in line:
						source = line.split('source ', 1)[1].split('\n')[0]
					if 'target' in line:
						target = line.split('target ', 1)[1].split('\n')[0]
						if source in numbers and target in numbers:
							edges.append((source, target))
				except IndexError:
					pass
			dict_nodes = dict(nodes)
			for inp, out in edges:
				if inp in dict_nodes and out in dict_nodes:
					df2.loc[dict_nodes[inp], dict_nodes[out]] = 1
			x = df2.to_numpy()
			img = Image.fromarray((x * 255).astype(np.uint8))
			img.save('/mnt/d/Benign_GRAPH_IMAGES/' + file + '.png')
		except Exception as e:
			print(e)
			pass




